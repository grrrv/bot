import logging
import mysql.connector
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="1234",
        database="university_schedule"
    )

# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –Ω–∞ –¥–µ–Ω—å
def get_schedule_by_teacher_day(teacher_name, day_name):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    query = """
        SELECT g.name AS student_groups, d.name AS day, t.start_end_time AS time, s.name AS subject, c.type_info AS class_type, l.location_info AS location
        FROM schedule sch
        JOIN student_groups g ON sch.group_id = g.id
        JOIN days d ON sch.day_id = d.id
        JOIN time_slots t ON sch.time_slot_id = t.id
        JOIN subjects s ON sch.subject_id = s.id
        JOIN teachers te ON sch.teacher_id = te.id
        JOIN class_types c ON sch.class_type_id = c.id
        JOIN locations l ON sch.location_id = l.id
        WHERE te.full_name = %s AND d.name = %s
        ORDER BY t.start_end_time
    """
    cursor.execute(query, (teacher_name, day_name))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return rows

def get_schedule_by_group_week(group_name):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    query = """
        SELECT d.name AS day, t.start_end_time AS time, s.name AS subject, te.full_name AS teacher, c.type_info AS class_type, l.location_info AS location
        FROM schedule sch
        JOIN student_groups g ON sch.group_id = g.id
        JOIN days d ON sch.day_id = d.id
        JOIN time_slots t ON sch.time_slot_id = t.id
        JOIN subjects s ON sch.subject_id = s.id
        JOIN teachers te ON sch.teacher_id = te.id
        JOIN class_types c ON sch.class_type_id = c.id
        JOIN locations l ON sch.location_id = l.id
        WHERE g.name = %s
        ORDER BY d.id, t.start_end_time
    """
    cursor.execute(query, (group_name,))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return rows

def get_schedule_by_group_day(group_name, day_name):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    query = """
        SELECT d.name AS day, t.start_end_time AS time, s.name AS subject, te.full_name AS teacher, c.type_info AS class_type, l.location_info AS location
        FROM schedule sch
        JOIN student_groups g ON sch.group_id = g.id
        JOIN days d ON sch.day_id = d.id
        JOIN time_slots t ON sch.time_slot_id = t.id
        JOIN subjects s ON sch.subject_id = s.id
        JOIN teachers te ON sch.teacher_id = te.id
        JOIN class_types c ON sch.class_type_id = c.id
        JOIN locations l ON sch.location_id = l.id
        WHERE g.name = %s AND d.name = %s
        ORDER BY d.id, t.start_end_time
    """
    cursor.execute(query, (group_name,))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return rows
# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
def get_schedule_by_teacher_week(teacher_name):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    query = """
        SELECT g.name AS student_group, d.name AS day, t.start_end_time AS time, s.name AS subject, c.type_info AS class_type, l.location_info AS location
        FROM schedule sch
        JOIN student_groups g ON sch.group_id = g.id
        JOIN days d ON sch.day_id = d.id
        JOIN time_slots t ON sch.time_slot_id = t.id
        JOIN subjects s ON sch.subject_id = s.id
        JOIN teachers te ON sch.teacher_id = te.id
        JOIN class_types c ON sch.class_type_id = c.id
        JOIN locations l ON sch.location_id = l.id
        WHERE te.full_name = %s
        ORDER BY d.id, t.start_end_time
    """
    cursor.execute(query, (teacher_name,))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return rows

def get_schedule_by_location(location_info):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    query = """
        SELECT g.name AS student_group, d.name AS day, t.start_end_time AS time, s.name AS subject,
               c.type_info AS class_type, te.full_name AS teacher
        FROM schedule sch
        JOIN student_groups g ON sch.group_id = g.id
        JOIN days d ON sch.day_id = d.id
        JOIN time_slots t ON sch.time_slot_id = t.id
        JOIN subjects s ON sch.subject_id = s.id
        JOIN teachers te ON sch.teacher_id = te.id
        JOIN class_types c ON sch.class_type_id = c.id
        JOIN locations l ON sch.location_id = l.id
        WHERE l.location_info = %s
        ORDER BY d.id, t.start_end_time
    """
    cursor.execute(query, (location_info,))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return rows


# –ö–æ–º–∞–Ω–¥–∞ /day
async def teacher_day_command(query, teacher, day):
    
    schedule = get_schedule_by_teacher_day(teacher, day)
    if not schedule:
        await query.message.reply_text("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
        return

    text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {teacher} –Ω–∞ {day}:\n\n"
    for row in schedule:
        text += f"{row['time']} ‚Äî {row['subject']} ({row['class_type']}) –≤ {row['location']}\n"
    await query.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /week
async def teacher_week_command(update, teacher):
    
    schedule = get_schedule_by_teacher_week(teacher)
    if not schedule:
        await update.message.reply_text("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é.")
       
    text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {teacher} –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    current_day = ""
    for row in schedule:
        if row['day'] != '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':
            current_day = row['day']
            text += f"\nüî∏ {current_day}:\n"
        text += f"{row['time']} ‚Äî {row['subject']} ({row['class_type']}) –≤ {row['location'] } {row['student_group']} \n"
    await update.message.reply_text(text)

async def group_week_command(query, group):
    schedule = get_schedule_by_group_week(group)
    if not schedule:
        await query.message.reply_text("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é.")
        return

    text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group} –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    current_day = ""
    for row in schedule:
        if row['day'] != current_day:
            current_day = row['day']
            text += f"\nüî∏ {current_day}:\n"
        text += f"{row['time']} ‚Äî {row['subject']} {row['teacher']} ({row['class_type']}) –≤ {row['location'] } \n"
    await query.message.reply_text(text)

async def group_day_command(query, group, day):
    schedule = get_schedule_by_group_day(group, day)
    if not schedule:
        await query.message.reply_text("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é.")
        return

    text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group} –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    current_day = ""
    for row in schedule:
        if row['day'] != current_day:
            current_day = row['day']
            text += f"\nüî∏ {current_day}:\n"
        text += f"{row['time']} ‚Äî {row['subject']} {row['teacher']} ({row['class_type']}) –≤ {row['location'] } \n"
    await query.message.reply_text(text)

async def place_command(update, location):
    schedule = get_schedule_by_location(location)
    if not schedule:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ.")
        return
    
    text = f"üìç –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {location}\n"
    current_day = ""
    for row in schedule:
        if row["day"] != current_day:
            current_day = row["day"]
            text += f"\nüî∏ {current_day}:\n"
        text += f"{row['time']} ‚Äî {row['subject']} ({row['class_type']}) ‚Äî {row['teacher']} {row['student_group']}\n"
    await update.message.reply_text(text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
faculties = ["–§–ú–§–ò", "–§–ù–û", "–§–ü–°–û", "–ò–§", "–§–ö–ò", "–§–§", "–§–§–ö–°", "–§–ò–Ø", "–ï–ì–§", "–§–≠–£–°"]  # —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
DAY_WEEK_CHOICE, DAY_SELECTION = range(2)

async def start(update: Update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    keyboard = [
        [KeyboardButton('–ì—Ä—É–ø–ø–∞')],
        [KeyboardButton('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')],
        [KeyboardButton('–ê—É–¥–∏—Ç–æ—Ä–∏—è')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–µ—Ç–µ, –¥–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    if choice == 'group':
        await show_faculties(query)
    elif choice == 'teacher':
        await teacher_button_clicked(update, context)
    elif choice == 'room':
        await classroom_button_clicked(update, context)

async def show_faculties(query):
    faculties = ['–§–ú–§–ò', '–ï–ì–§', '–ò–§', '–§–ü–°–û', '–§–§', '–§–§–ö–°', '–§–ö–ò', '–§–ù–û', '–§–≠–£–°', '–§–ò–Ø']
    buttons = [[InlineKeyboardButton(faculty, callback_data=f'g_{faculty}')] for faculty in faculties]
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=reply_markup)

async def select_group(query, faculty):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM student_groups WHERE name LIKE  %s", (f"{faculty}%",))
    rows = cursor.fetchall()
    groups = [row[0] for row in rows]
    
    buttons = [[InlineKeyboardButton(group, callback_data=f'schedule_{group}')] for group in groups]
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=reply_markup)

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")

async def main_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
    if update.message.entities and any(entity.type == 'bot_command' for entity in update.message.entities):
        await unknown_command(update, context)
async def group_button_clicked(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
    keyboard = []
    row = []
    for i, faculty in enumerate(faculties):
        row.append(InlineKeyboardButton(faculty, callback_data=f'faculty_{faculty}'))
        if len(row) == 3 or i + 1 == len(faculties):  # –¥–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', reply_markup=reply_markup)


async def group_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    query = update.callback_query
    await query.answer()
    selected_group = query.data.split('_')[1]
    await query.edit_message_text(text=f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {selected_group}")
    await group_week_command(query, selected_group)

async def faculty_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_faculty = query.data.split('_')[1]
    await query.edit_message_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_faculty}.')
    await select_group(query, selected_faculty)
    

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ)
async def teacher_button_clicked(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –§–∞–º–∏–ª–∏—è –ò.–û.:', reply_markup=None)
    

async def teacher_sch_show(update, context):
    teacher = update.message.text
    await teacher_week_command(update, teacher)

async def classroom_button_clicked(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 100, –∫–æ—Ä–ø—É—Å ‚Ññ1: ', reply_markup=None)
    


async def class_sch_show(update: Update, context):
    class_name  = update.message.text
    await place_command(update, class_name)

def main():
    TOKEN = "" 
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(faculty_selected, pattern='^faculty_'))
    app.add_handler(CallbackQueryHandler(group_select_callback, pattern='^schedule_'))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–ì—Ä—É–ø–ø–∞$'), group_button_clicked))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å$'), teacher_button_clicked))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–ê—É–¥–∏—Ç–æ—Ä–∏—è$'), classroom_button_clicked))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND)&(~filters.Regex(r'\d'))&(~filters.Regex('–≠–ò–û–° –°–ì–°–ü–£')), teacher_sch_show))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), class_sch_show))
    app.add_handler(MessageHandler(filters.ALL, main_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
